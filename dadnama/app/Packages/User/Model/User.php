<?php

namespace App\Packages\User\Model;


use App\Packages\Plan\Model\UserPlan;
use App\Packages\Template\Model\UserTemplate;
use App\Packages\Tools\Extend\AuthEntity;
use App\Packages\Tools\Transaction\Transaction as ToolsDb;
use Illuminate\Http\Request;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\Hash;


class User extends AuthEntity
{
    use Notifiable;


    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'username',
        'name',
        'email',
        'mobile',
        'password',
        'status' //[wait:0,active:1,deny:2,trash:3]
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    public function scopeGetByUsername($query, $username)
    {
        return $query->where('username', $username);
    }

    public function scopeGetByEmail($query, $email)
    {
        return $query->where('email', $email);
    }

    public function scopeGetByMobile($query, $mobile)
    {
        return $query->where('mobile', $mobile);
    }

    //wait:0
    public function scopeWait($query)
    {
        return $query->where('status', 0);
    }

    //active:1
    public function scopeActive($query)
    {
        return $query->where('status', 1);
    }

    //deny:2
    public function scopeDeny($query)
    {
        return $query->where('status', 2);
    }


    //trash:3
    public function scopeTrash($query, $value = 3)
    {
        return $query->where('status', $value);
        // TODO: Change the autogenerated stub
    }

    public function vrify()
    {
        return $this->hasOne(UserVerify::class, 'user_id')->orderByDesc('id');
    }

    public function user_template()
    {
        return $this->hasOne(UserTemplate::class, 'user_id')->with('template');
    }

    public function user_setting()
    {
        return $this->hasOne(UserSetting::class, 'user_id');
    }

    public function user_plan()
    {
        return $this->hasOne(UserPlan::class, 'user_id');
    }

    /**
     * @param $key
     * @param $password
     * @return array
     */
    public static function login($key, $password)
    {
        $user = self::getByUsername($key)->active()->first();
        if ($user == null) {
            $user = self::getByEmail($key)->active()->first();
        }
        if ($user == null) {
            $user = self::getByMobile($key)->active()->first();
        }
        if ($user == null) {
            return ["error" => true, "errors" => [trans("errors.user.not_user")]];
        }
        if ($user->status !== 1) {
            return [
                "error" => true,
                "errors" => [
                    trans("errors.user.not_active"),
                    trans("errors.user.not_user")]
            ];
        }
        if (!Hash::check($password, $user->password)) {
            return [
                "error" => true,
                "errors" => [trans("errors.user.not_user")],
            ];
        }

        $api = token()->set($user, 3600);
        if ($api === null) {
            return [
                "error" => true,
                "errors" => [trans("errors.user.not_user")]
            ];
        }

        return [
            "error" => false,
            "title" => trans('errors.user.success'),
            "api" => $api,
            "user" => $user
        ];
    }

    public static function signup($args)
    {

        ToolsDb::beginTransaction();
        $user = self::create([
            'name' => $args['name'],
            'username' => isset($args['username']) ? $args['username'] : null,
            'email' => isset($args['email']) ? $args['email'] : null,
            'mobile' => isset($args['mobile']) ? $args['mobile'] : null,
            'password' => bcrypt($args['password']),
            'status' => 0,//wait
        ]);
        if ($user === null) {
            ToolsDb::rollback();
            return null;
        }

        $userplan = UserPlan::free($user);
        if ($userplan === null) {
            ToolsDb::rollback();
            return null;
        }

        $api = token()->set($user, 3600);
        if ($api === null) {
            return null;
        }
        if ($api === null) {
            return null;
        }

        $vr = UserVerify::sendVrify($user);
        if ($vr === null) {
            return null;
        }
        ToolsDb::commit();
        return [
            "title" => trans('errors.user.success'),
            "errors" => null,
            "api" => $api,
            "user" => $user
        ];

    }
}
